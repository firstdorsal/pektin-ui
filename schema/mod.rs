// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
#[serde(tag = "type")]
pub enum RedisEntry {
    #[serde(rename = "A")]
    A(RedisEntryA),

    #[serde(rename = "AAAA")]
    Aaaa(RedisEntryAaaa),

    #[serde(rename = "CAA")]
    Caa(RedisEntryCaa),

    #[serde(rename = "CNAME")]
    Cname(RedisEntryCname),

    #[serde(rename = "MX")]
    Mx(RedisEntryMx),

    #[serde(rename = "NS")]
    Ns(RedisEntryNs),

    #[serde(rename = "OPENPGPKEY")]
    Openpgpkey(RedisEntryOpenpgpkey),

    #[serde(rename = "PTR")]
    Ptr(RedisEntryPtr),

    #[serde(rename = "SOA")]
    Soa(RedisEntrySoa),

    #[serde(rename = "SRV")]
    Srv(RedisEntrySrv),

    #[serde(rename = "TLSA")]
    Tlsa(RedisEntryTlsa),

    #[serde(rename = "TXT")]
    Txt(RedisEntryTxt),
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryA {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<A>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryAaaa {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Aaaa>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryCaa {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Caa>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryCname {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Cname>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryMx {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Mx>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryNs {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Ns>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryOpenpgpkey {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Openpgpkey>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryPtr {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Ptr>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntrySoa {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Soa>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntrySrv {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Srv>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryTlsa {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Tlsa>,
}

#[derive(Serialize, Deserialize)]
pub struct RedisEntryTxt {
    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "rr_set")]
    pub rrSet: Vec<Txt>,
}

#[derive(Serialize, Deserialize)]
pub struct Test {
    #[serde(rename = "redisEntry")]
    pub redisEntry: RedisEntry,
}

#[derive(Serialize, Deserialize)]
pub struct A {
    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub struct Aaaa {
    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub enum CaaTag {
    #[serde(rename = "iodef")]
    Iodef,

    #[serde(rename = "issue")]
    Issue,

    #[serde(rename = "issuewild")]
    Issuewild,
}

#[derive(Serialize, Deserialize)]
pub struct Caa {
    #[serde(rename = "tag")]
    pub tag: CaaTag,

    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub struct Cname {
    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub struct Mx {
    #[serde(rename = "exchange")]
    pub exchange: String,

    #[serde(rename = "preference")]
    pub preference: u32,

    #[serde(rename = "ttl")]
    pub ttl: u32,
}

#[derive(Serialize, Deserialize)]
pub struct Ns {
    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub struct Openpgpkey {
    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub struct Ptr {
    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub struct Soa {
    #[serde(rename = "mname")]
    pub mname: String,

    #[serde(rename = "rname")]
    pub rname: String,

    #[serde(rename = "ttl")]
    pub ttl: u32,
}

#[derive(Serialize, Deserialize)]
pub struct Srv {
    #[serde(rename = "port")]
    pub port: u32,

    #[serde(rename = "priority")]
    pub priority: u32,

    #[serde(rename = "target")]
    pub target: String,

    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "weight")]
    pub weight: u32,
}

#[derive(Serialize, Deserialize)]
pub enum TlsaMatchingType {
    #[serde(rename = "0")]
    DefaultName,

    #[serde(rename = "1")]
    DefaultName0,

    #[serde(rename = "2")]
    DefaultName1,
}

#[derive(Serialize, Deserialize)]
pub enum TlsaSelector {
    #[serde(rename = "0")]
    DefaultName,

    #[serde(rename = "1")]
    DefaultName0,
}

#[derive(Serialize, Deserialize)]
pub enum TlsaUsage {
    #[serde(rename = "0")]
    DefaultName,

    #[serde(rename = "1")]
    DefaultName0,

    #[serde(rename = "2")]
    DefaultName1,

    #[serde(rename = "3")]
    DefaultName2,
}

#[derive(Serialize, Deserialize)]
pub struct Tlsa {
    #[serde(rename = "data")]
    pub data: u32,

    #[serde(rename = "matchingType")]
    pub matchingType: TlsaMatchingType,

    #[serde(rename = "selector")]
    pub selector: TlsaSelector,

    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "usage")]
    pub usage: TlsaUsage,
}

#[derive(Serialize, Deserialize)]
pub struct Txt {
    #[serde(rename = "ttl")]
    pub ttl: u32,

    #[serde(rename = "value")]
    pub value: String,
}
