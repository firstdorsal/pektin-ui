// Code generated by jtd-codegen for TypeScript v0.2.1

export type RedisEntry =
  | RedisEntryA
  | RedisEntryAaaa
  | RedisEntryCaa
  | RedisEntryCname
  | RedisEntryMx
  | RedisEntryNs
  | RedisEntryOpenpgpkey
  | RedisEntryPtr
  | RedisEntrySoa
  | RedisEntrySrv
  | RedisEntryTlsa
  | RedisEntryTxt;

export interface RedisEntryA {
  type: "A";
  name: string;
  rr_set: A[];
}

export interface RedisEntryAaaa {
  type: "AAAA";
  name: string;
  rr_set: Aaaa[];
}

export interface RedisEntryCaa {
  type: "CAA";
  name: string;
  rr_set: Caa[];
}

export interface RedisEntryCname {
  type: "CNAME";
  name: string;
  rr_set: Cname[];
}

export interface RedisEntryMx {
  type: "MX";
  name: string;
  rr_set: Mx[];
}

export interface RedisEntryNs {
  type: "NS";
  name: string;
  rr_set: Ns[];
}

export interface RedisEntryOpenpgpkey {
  type: "OPENPGPKEY";
  name: string;
  rr_set: Openpgpkey[];
}

export interface RedisEntryPtr {
  type: "PTR";
  name: string;
  rr_set: Ptr[];
}

export interface RedisEntrySoa {
  type: "SOA";
  name: string;
  rr_set: Soa[];
}

export interface RedisEntrySrv {
  type: "SRV";
  name: string;
  rr_set: Srv[];
}

export interface RedisEntryTlsa {
  type: "TLSA";
  name: string;
  rr_set: Tlsa[];
}

export interface RedisEntryTxt {
  type: "TXT";
  name: string;
  rr_set: Txt[];
}

export interface Test {
  redisEntry: RedisEntry;
}

export interface A {
  ttl: number;
  value: string;
}

export interface Aaaa {
  ttl: number;
  value: string;
}

export enum CaaTag {
  Iodef = "iodef",
  Issue = "issue",
  Issuewild = "issuewild",
}

export interface Caa {
  tag: CaaTag;
  ttl: number;
  value: string;
}

export interface Cname {
  ttl: number;
  value: string;
}

export interface Mx {
  exchange: string;
  preference: number;
  ttl: number;
}

export interface Ns {
  ttl: number;
  value: string;
}

export interface Openpgpkey {
  ttl: number;
  value: string;
}

export interface Ptr {
  ttl: number;
  value: string;
}

export interface Soa {
  mname: string;
  rname: string;
  ttl: number;
}

export interface Srv {
  port: number;
  priority: number;
  target: string;
  ttl: number;
  weight: number;
}

export enum TlsaMatchingType {
  DefaultName = "0",
  DefaultName0 = "1",
  DefaultName1 = "2",
}

export enum TlsaSelector {
  DefaultName = "0",
  DefaultName0 = "1",
}

export enum TlsaUsage {
  DefaultName = "0",
  DefaultName0 = "1",
  DefaultName1 = "2",
  DefaultName2 = "3",
}

export interface Tlsa {
  data: number;
  matchingType: TlsaMatchingType;
  selector: TlsaSelector;
  ttl: number;
  usage: TlsaUsage;
}

export interface Txt {
  ttl: number;
  value: string;
}
